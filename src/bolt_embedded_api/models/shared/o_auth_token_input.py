"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from enum import Enum
from typing import Optional

class OAuthTokenInputGrantType(str, Enum):
    r"""The type of OAuth 2.0 grant being utilized.

    The value will always be `authorization_code` when exchanging an authorization code for an access token.
    """
    AUTHORIZATION_CODE = 'authorization_code'

class OAuthTokenInputScope(str, Enum):
    r"""The scope issued to the merchant when receiving an authorization code. Options include `bolt.account.manage`, `bolt.account.view`, `openid`. You can find more information on these options in our [OAuth scope documentation](https://help.bolt.com/developers/references/bolt-oauth/#scopes)."""
    BOLT_ACCOUNT_MANAGE = 'bolt.account.manage'
    BOLT_ACCOUNT_VIEW = 'bolt.account.view'
    OPENID = 'openid'


@dataclasses.dataclass
class OAuthTokenInput:
    client_id: str = dataclasses.field(metadata={'form': { 'field_name': 'client_id' }})
    r"""Merchant publishable key which can be found in the merchant dashboard"""
    client_secret: str = dataclasses.field(metadata={'form': { 'field_name': 'client_secret' }})
    r"""Your Bolt API Key."""
    code: str = dataclasses.field(metadata={'form': { 'field_name': 'code' }})
    r"""Fetched value using OTP value from the Authorization Modal."""
    grant_type: OAuthTokenInputGrantType = dataclasses.field(metadata={'form': { 'field_name': 'grant_type' }})
    r"""The type of OAuth 2.0 grant being utilized.

    The value will always be `authorization_code` when exchanging an authorization code for an access token.
    """
    scope: OAuthTokenInputScope = dataclasses.field(metadata={'form': { 'field_name': 'scope' }})
    r"""The scope issued to the merchant when receiving an authorization code. Options include `bolt.account.manage`, `bolt.account.view`, `openid`. You can find more information on these options in our [OAuth scope documentation](https://help.bolt.com/developers/references/bolt-oauth/#scopes)."""
    state: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'state' }})
    r"""A randomly generated string issued to the merchant when receiving an authorization code used to prevent CSRF attacks"""
    

