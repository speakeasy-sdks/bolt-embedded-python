"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .cart_item_customization import CartItemCustomization
from .cart_item_property import CartItemProperty
from .cart_shipment import CartShipment
from .i_cart_item_external_inputs import ICartItemExternalInputs
from bolt_embedded_api import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import List, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GiftOption:
    r"""Contains the gift option settings for wrapping and custom messages."""
    cost: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cost'), 'exclude': lambda f: f is None }})
    r"""The cost in cents."""
    merchant_product_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchant_product_id'), 'exclude': lambda f: f is None }})
    r"""The merchant's unique ID for the product."""
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""Includes the gift message written by the shopper."""
    wrap: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wrap'), 'exclude': lambda f: f is None }})
    r"""Defines whether gift wrapping was requested."""
    


class ShipmentType(str, Enum):
    UNKNOWN = 'unknown'
    DOOR_DELIVERY = 'door_delivery'
    SHIP_TO_STORE = 'ship_to_store'
    IN_STORE_PICKUP = 'in_store_pickup'

class CartItemType(str, Enum):
    UNKNOWN = 'unknown'
    DIGITAL = 'digital'
    PHYSICAL = 'physical'
    BUNDLED = 'bundled'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CartItem:
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    quantity: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity') }})
    reference: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference') }})
    total_amount: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_amount') }})
    r"""The total amount, in cents, of the item including its taxes if applicable."""
    unit_price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit_price') }})
    r"""The price of one unit of the item; for example, the price of one pack of socks."""
    brand: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand') }})
    category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category') }})
    r"""Used to define a product category associated with the item."""
    collections: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collections'), 'exclude': lambda f: f is None }})
    color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color') }})
    r"""Used to define the color of the item."""
    customizations: Optional[List[CartItemCustomization]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customizations'), 'exclude': lambda f: f is None }})
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    details_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('details_url'), 'exclude': lambda f: f is None }})
    r"""Used to provide a link to the item's product page."""
    external_inputs: Optional[ICartItemExternalInputs] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_inputs'), 'exclude': lambda f: f is None }})
    gift_option: Optional[GiftOption] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gift_option'), 'exclude': lambda f: f is None }})
    r"""Contains the gift option settings for wrapping and custom messages."""
    image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_url'), 'exclude': lambda f: f is None }})
    r"""Used to provide a link to the image associated with the item."""
    isbn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isbn') }})
    r"""Used to define the International Standard Book Number associated with the book."""
    item_group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item_group') }})
    manufacturer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manufacturer') }})
    r"""Used to define the organization that manufactured the item."""
    merchant_product_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchant_product_id'), 'exclude': lambda f: f is None }})
    r"""The merchant's unique ID for the product."""
    merchant_variant_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchant_variant_id'), 'exclude': lambda f: f is None }})
    r"""A merchant's unique ID for a given product's specific variant."""
    msrp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('msrp') }})
    options: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    properties: Optional[List[CartItemProperty]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties'), 'exclude': lambda f: f is None }})
    shipment: Optional[CartShipment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipment'), 'exclude': lambda f: f is None }})
    r"""A cart that is being prepared for shipment"""
    shipment_type: Optional[ShipmentType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipment_type'), 'exclude': lambda f: f is None }})
    size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size') }})
    r"""Used to define the size of the item."""
    sku: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sku') }})
    r"""Used to define the alpha-numberic Stock Keeping Unit associated with the item as it is mapped to your internal product catalogue."""
    source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source') }})
    tags: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags') }})
    r"""Used to define a comma-separated list of tags associated with the item."""
    tax_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_amount') }})
    r"""The tax amount for the item; this value should scale with the quantity of units selected."""
    tax_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax_code') }})
    taxable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxable') }})
    type: Optional[CartItemType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    uom: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uom') }})
    r"""Used to define the unit of measure used to describe the item."""
    upc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upc') }})
    r"""Used to define the 12-digit Universal Product Code (a barcode) associated with the item worldwide."""
    weight: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weight') }})
    weight_unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weight_unit') }})
    

