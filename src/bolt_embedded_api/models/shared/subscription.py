"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from bolt_embedded_api import utils
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from typing import Optional

class SubscriptionFrequencyUnit(str, Enum):
    r"""The unit for this subscription's frequency."""
    DAY = 'day'
    WEEK = 'week'
    MONTH = 'month'
    YEAR = 'year'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SubscriptionFrequency:
    r"""Describes how often the subscription recurs."""
    unit: Optional[SubscriptionFrequencyUnit] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit'), 'exclude': lambda f: f is None }})
    r"""The unit for this subscription's frequency."""
    value: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""The value applied to the unit frequency."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Subscription:
    r"""Describes a product added as a recurring subscription."""
    frequency: Optional[SubscriptionFrequency] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequency'), 'exclude': lambda f: f is None }})
    r"""Describes how often the subscription recurs."""
    

